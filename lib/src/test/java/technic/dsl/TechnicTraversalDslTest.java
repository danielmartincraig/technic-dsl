/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package technic.dsl;

import org.apache.tinkerpop.gremlin.structure.T;
import org.apache.tinkerpop.gremlin.structure.Vertex;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.apache.commons.configuration.BaseConfiguration;
import org.apache.tinkerpop.gremlin.process.traversal.AnonymousTraversalSource;
import org.apache.tinkerpop.gremlin.structure.Graph;
import org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph;
import org.junit.jupiter.api.BeforeAll;

class TechnicTraversalDslTest {
    
    private static Graph graph;
    private static TechnicTraversalSource g;

    private static Graph buildGraph() {
        BaseConfiguration configuration = new BaseConfiguration();
        configuration.setProperty("gremlin.tinkerGraph.vertexIdManager", "ANY");

        return TinkerGraph.open(configuration);

    }

    @BeforeAll
    public static void setup() {
        graph = buildGraph();
        g = AnonymousTraversalSource.traversal(TechnicTraversalSource.class).withEmbedded(graph);
    }
    
    @Test
    public void gearStepShouldCreateGearVertex() {
        g.gear("gearId").next();
        assertEquals("gearId", g.V("gearId").id().next());
    }

    @Test
    public void drivesStepShouldCreateDrivesEdge() {
        g.gear("driverGear").drives(__.gear("followerGear")).next();
        assertEquals(2, g.V("driverGear", "followerGear").count().next());
        assertEquals(1, g.V("driverGear").out().count().next());
    }

   
}
